// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'underscore', 'EventEmitter', 'commands', 'CropSubMenu', 'ToolbarItem'], function($, _, event_emitter, commands, CropSubMenu, ToolbarItem) {
    var ToolBar;
    return ToolBar = (function(_super) {

      __extends(ToolBar, _super);

      function ToolBar(toolbar, default_command) {
        this.applyCommand = __bind(this.applyCommand, this);

        this.on_toolbar_item_click = __bind(this.on_toolbar_item_click, this);

        var _this = this;
        this.toolbar = $(toolbar);
        this.menu_items = {};
        this.toolbar.find('li').each(function(idx, item) {
          var command_name, li, menu_item;
          li = $(item);
          command_name = li.data("commandname");
          menu_item = new ToolbarItem(_this, command_name);
          return _this.menu_items[command_name] = menu_item;
        });
        this.toolbar_items = this.toolbar.find('li');
        event_emitter.on("ItemSelected", function(selected_item) {
          return _this.selected_canvas_item = selected_item;
        });
        event_emitter.on("ItemDeSelected", function() {
          var _ref;
          console.log("toolbar ItemDelected:");
          if ((_ref = _this.current_command) != null) {
            _ref.unbind(_this.selected_canvas_item);
          }
        });
        this.toolbar_items.find('a').click(this.on_toolbar_item_click);
      }

      ToolBar.prototype.hide_menu = function() {
        return this.toolbar.find('a').hide();
      };

      ToolBar.prototype.show_menu = function() {
        return this.toolbar.find('a').show();
      };

      ToolBar.prototype.on_toolbar_item_click = function(evt, ui) {
        var command_name, menu_item, previous_menu_item;
        menu_item = $(evt.currentTarget).parent();
        command_name = menu_item.data('commandname');
        console.log("selected action: " + command_name);
        previous_menu_item = this.current_menu_item;
        this.current_menu_item = this.menu_items[command_name];
        return this.current_menu_item.activate(this.selected_canvas_item);
      };

      ToolBar.prototype.set_initial_active = function() {
        var active_item, i, _i, _len, _ref;
        _ref = this.toolbar_items;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if ($(i).hasClass('active')) {
            active_item = $(i);
          }
        }
        if (active_item == null) {
          active_item = this.toolbar_items[0];
        }
        return this.set_active(active_item);
      };

      ToolBar.prototype.applyCommand = function(item) {};

      return ToolBar;

    })(Module);
  });

}).call(this);
